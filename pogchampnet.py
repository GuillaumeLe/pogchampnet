# -*- coding: utf-8 -*-
"""PogchampNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ah7F0JSorUeNb52MpP6YXJQAL0_6ESn7
"""

from keras.applications.inception_resnet_v2 import InceptionResNetV2
import cv2
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
from PIL import Image
import os, os.path

nb_samples = len([name for name in os.listdir('./samples') if os.path.isfile(os.path.join('./samples', name))])
def generator():
  for count in range(nb_samples // 10):
    frame = count*10
    img = Image.open('./samples/frame%d.jpg' % frame)
    img = img.resize((216, 384), Image.ANTIALIAS)
    pix = np.array(img.getdata()).reshape(216,384, 3)
    yield np.array([pix])



def get_model():
  model = InceptionResNetV2(include_top = True, weights = None, input_shape=(216,384,3), classes=10)
  model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
  # model.summary()
  return model


myGen = generator()
print(next(myGen))

print('loading model')
model = get_model()
model.load_weights('saved_model.h5')

# img = img.resize((216, 384), Image.ANTIALIAS)
# pix = np.array(img.getdata()).reshape(216,384, 3)

print('Start prediction')
predict = model.predict_generator(myGen, steps=nb_samples)
for p in predict:
  print(np.argmax(p))




